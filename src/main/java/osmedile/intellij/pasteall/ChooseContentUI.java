package osmedile.intellij.pasteall;

import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.EditorFactory;
import com.intellij.openapi.ide.CopyPasteManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.text.StringUtil;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;

public class ChooseContentUI extends JDialog {
    private JPanel contentPane;
    private JButton pasteBt;
    private JButton buttonCancel;
    private JList transferableList;
    private JRadioButton recentFirst;
    private JRadioButton olderFirst;
    private JSplitPane splitPane;
    private JTextField filter;
    private Editor myViewer;

    private Project project;
    private Editor editor;

    private ArrayList<String> shortened;
    private ChooseContentUI.MyListModel model;

    /**
     * Void panel used to hide preview, when no item is selected
     */
    private JPanel voidPanel;

    public ChooseContentUI() {
        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(pasteBt);

        pasteBt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

// call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        //More specific
        voidPanel = new JPanel();
        voidPanel.setMinimumSize(new Dimension(0, 0));

        shortened = new ArrayList<String>();
        filter.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                super.keyTyped(e);
            }

            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);
            }

            @Override
            public void keyReleased(KeyEvent e) {
                rebuildListContent();
            }
        });

        model = new MyListModel();
        transferableList.setModel(model);

        rebuildListContent();


        transferableList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                updateViewerForSelection();
            }
        }
        );
        updateViewerForSelection();
    }

    public ChooseContentUI(Project project, Editor editor) {
        this();
        this.project = project;
        this.editor = editor;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        contentPane.setPreferredSize(new Dimension(520, 570));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(5, 5, 5, 5);
        contentPane.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        pasteBt = new JButton();
        pasteBt.setText("OK");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(pasteBt, gbc);
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(buttonCancel, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        panel3.setMinimumSize(new Dimension(200, 150));
        panel3.setPreferredSize(new Dimension(350, 350));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel3, gbc);
        splitPane = new JSplitPane();
        splitPane.setOrientation(0);
        splitPane.setRequestFocusEnabled(true);
        splitPane.setResizeWeight(0.0);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(splitPane, gbc);
        transferableList = new JList();
        transferableList.setMinimumSize(new Dimension(200, 130));
        transferableList.setPreferredSize(new Dimension(250, 350));
        splitPane.setLeftComponent(transferableList);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 0, 5, 0);
        contentPane.add(panel4, gbc);
        panel4.setBorder(BorderFactory.createTitledBorder("Filter"));
        filter = new JTextField();
        filter.setMinimumSize(new Dimension(50, 20));
        filter.setText("");
        filter.putClientProperty("html.disable", Boolean.TRUE);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel4.add(filter, gbc);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.VERTICAL;
        contentPane.add(panel5, gbc);
        panel5.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.black), "Ordering",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION, new Font(
                panel5.getFont().getName(), panel5.getFont().getStyle(),
                panel5.getFont().getSize())));
        recentFirst = new JRadioButton();
        recentFirst.setSelected(false);
        recentFirst.setText("Top to bottom (recent to older)");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel5.add(recentFirst, gbc);
        olderFirst = new JRadioButton();
        olderFirst.setSelected(true);
        olderFirst.setText("Bottom to top (older to recent)");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel5.add(olderFirst, gbc);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(olderFirst);
        buttonGroup.add(recentFirst);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    public class MyListModel extends AbstractListModel {
        public int getSize() {
            return shortened.size();
        }

        public Object getElementAt(int idx) {
            return shortened.get(idx);
        }

        public void fireChanges() {
            fireContentsChanged(shortened, 0, shortened.size());
        }
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    private void rebuildListContent() {
        Transferable[] trans = CopyPasteManager.getInstance().getAllContents();

        shortened.clear();
        for (Transferable tran : trans) {
            String value = PasteUtils.getValue(tran);
            if (StringUtil.isNotEmpty(value)) {
                if (!StringUtil.isEmptyOrSpaces(filter.getText())) {
                    if (value.contains(filter.getText())) {
                        shortened.add(value);
                    }
                } else {
                    shortened.add(value);
                }
            }
        }
        model.fireChanges();

    }

    private void onOK() {
        PasteUtils.pasteAll(editor, true, olderFirst.isSelected(),
                getSelectedValues());

        dispose();
    }

    public String[] getSelectedValues() {
        final Object[] selected = transferableList.getSelectedValues();
        String[] selects = new String[selected.length];
        System.arraycopy(selected, 0, selects, 0, selected.length);

        return selects;
    }

    @Override
    public void dispose() {
        super.dispose();
        if (myViewer != null) {
            EditorFactory.getInstance().releaseEditor(myViewer);
            myViewer = null;
        }
    }

    private void onCancel() {
        //Nothing to do
        dispose();
    }

    private void updateViewerForSelection() {
        if (transferableList.getSelectedValue() == null) {
            splitPane.setRightComponent(voidPanel);
            splitPane.setDividerLocation(1d);
            return;
        }
        String fullString = (String) transferableList.getSelectedValue();
        fullString = StringUtil.convertLineSeparators(fullString);
        if (myViewer != null) {
            EditorFactory.getInstance().releaseEditor(myViewer);
        }

        Document doc =
                EditorFactory.getInstance().createDocument(fullString);
        myViewer = EditorFactory.getInstance().createViewer(doc, project);
        myViewer.getComponent().setPreferredSize(new Dimension(300, 500));
        myViewer.getSettings().setFoldingOutlineShown(false);
        myViewer.getSettings().setLineNumbersShown(false);
        myViewer.getSettings().setLineMarkerAreaShown(false);
        splitPane.setRightComponent(myViewer.getComponent());
        splitPane.setDividerLocation(0.6);

        splitPane.revalidate();
    }

}
